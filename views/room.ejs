<html>
<head>
    <title> Home </title>
</head>
<body>
<div>
    <div class="hero is-primary">
        <div class="hero-body">
            <div class="title">
                Chat room
            </div>
            <div id="chatPlaceholder" class="notification is-info">
            </div>
            <div>
                <input class="input" id="chatInput" />
            </div>

            <div class="is-flex is-align-items-flex-end is-flex-direction-column">
                <button class="button mt-4" onclick="send()"> Send </button>
                <div class="subtitle is-6 is-align-self-flex-end mt-2"> (Currently connected as <%= username %>) </div>
            </div>

        </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.1.3/socket.io.js"
            integrity="sha512-2RDFHqfLZW8IhPRvQYmK9bTLfj/hddxGXQAred2wNZGkrKQkLGj8RCkXfRJPHlDerdHHIzTFaahq4s/P4V6Qig=="
            crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/js-cookie/2.2.1/js.cookie.min.js"
            integrity="sha512-Meww2sXqNHxI1+5Dyh/9KAtvI9RZSA4c1K2k5iL02oiPO/RH3Q30L3M1albtqMg50u4gRTYdV4EXOQqXEI336A=="
            crossorigin="anonymous"></script>
    <script>
        const socket = io("ws://localhost:3000");
        const username = '<%- JSON.stringify(username) %>'.replace('"', '').replace('"', ''); // Left and right " "
        socket.on("connect", () => {
            console.log(`Connected to the socket as ${username}`);
            socket.emit('connection_message', username)
        });
        socket.on('server_message', (data) => {
            addMessageToChatBox(`SERVER : ${data.message}`, 'SERVER_MESSAGE');
        });
        socket.on('chat_message', (data) => {
            addMessageToChatBox(`${data.user} : ${data.message}`, 'CHAT_MESSAGE');
        });
        function addMessageToChatBox(message, message_type) {
            let chatElement = document.createElement('div');
            chatElement.classList.add('subtitle', 'is-6', 'notification', 'p-2', 'm-1');
            switch (message_type) {
                case 'SERVER_MESSAGE':
                    chatElement.classList.add('has-text-danger');
                    break;
                case 'CHAT_MESSAGE':
                    chatElement.classList.add('has-text-primary');
                    break;
                case 'CURRENT_USER_MESSAGE':
                    chatElement.classList.add('has-text-info');
                    break;
            }
            chatElement.innerText = message;
            const chatPlaceholder = document.getElementById("chatPlaceholder");
            chatPlaceholder.appendChild(chatElement);
        }
        async function send() {
            const message_contents = document.getElementById('chatInput').value;
            addMessageToChatBox(`${username} : ${message_contents}`, 'CURRENT_USER_MESSAGE');
            socket.emit('chat_message', username, message_contents);
        }
    </script>
</body>
<style>
    @import "https://cdn.jsdelivr.net/npm/bulma@0.9.2/css/bulma.min.css";
    #chatPlaceholder {
        min-width: 400px;
    }
    .SERVER_MESSAGE {
        color: indianred;
    }
</style>
</html>